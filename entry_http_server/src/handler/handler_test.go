package handler

import "testing"

func TestDecodePic(t *testing.T) {
	pic := ""
	DecodePic(pic, "1")
	type args struct {
		base64String string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := DecodePic(tt.args.base64String, "1"); got != tt.want {
				t.Errorf("DecodePic() = %v, want %v", got, tt.want)
			}
		})
	}
}
